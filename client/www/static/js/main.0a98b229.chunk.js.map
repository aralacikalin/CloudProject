{"version":3,"sources":["logo.svg","components/CloudItem/CloudItem.jsx","containers/CloudItemsMenu/CloudItemsMenu.jsx","containers/main/main.jsx","containers/nav/nav.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CloudItem","props","preventDefault","bind","event","fetch","this","item","then","response","headers","filename","get","split","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","remove","Link","onClick","Component","CloudItemsMenu","ismounted","state","items","fetchAll","isUnmounted","res","json","data","console","log","setState","map","val","i","key","Main","uploadedFile","onFileChange","onFileUpload","target","files","FormData","append","axios","post","className","src","logo","alt","rel","type","onChange","Nav","value","handleChange","handleRedirect","location","pathname","newValue","to","Paper","square","Tabs","undefined","indicatorColor","textColor","aria-label","Tab","label","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a98b229.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport axios from \"axios\"\r\n\r\nclass CloudItem extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.preventDefault=this.preventDefault.bind(this)\r\n  }\r\n  preventDefault(event){\r\n    /*\r\n    //!not very safe\r\n    fetch(`/download/${this.props.item}`)\r\n      .then(res=>{\r\n        if(res.ok){\r\n          window.open(`http://localhost:4000/download/${this.props.item}`)\r\n        }\r\n      });\r\n      */\r\n     //probably safer alternative than above\r\n     fetch(`/download/${this.props.item}`).then(response => {\r\n      const type = response.headers['content-type'];\r\n      const filename = response.headers\r\n          .get(\"content-disposition\")\r\n          .split('\"')[1];\r\n      const blob = response.blob().then(blob=>{\r\n\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = filename; // Here I want to get rid of hardcoded value instead I want filename from server\r\n        link.click();\r\n        link.remove(); //  Probably needed to remove html element after downloading?\r\n      })\r\n    });\r\n\r\n\r\n    event.preventDefault()\r\n  }\r\n  \r\n\r\n  render(){\r\n\r\n    return (\r\n      <div>\r\n          <Link onClick={this.preventDefault}>\r\n            {this.props.item}\r\n          </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CloudItem;\r\n","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {CloudItem} from '../../components';\r\n\r\nclass CloudItemsMenu extends Component {\r\n    ismounted=false\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            items:[]\r\n        }\r\n        this.fetchAll=this.fetchAll.bind(this)\r\n        this.fetch=this.fetch.bind(this)\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.fetchAll();\r\n        \r\n    }\r\n    componentWillUnmount(){\r\n        this.isUnmounted=true;\r\n    }\r\n    async fetch(){\r\n        \r\n        const res = await fetch(\"http://192.168.1.30:4000/content\")\r\n        const data =await res.json()\r\n        return data\r\n    }\r\n    async fetchAll(){\r\n        this.fetch().then(data=>{\r\n\r\n            console.log(data)\r\n            if(this.isUnmounted){\r\n                return;\r\n            }\r\n            else{\r\n    \r\n                this.setState({items:data})\r\n                console.log(this.state.items)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                CLOUD ITEMS\r\n                {this.state.items.map((val,i)=>(<CloudItem key={i} item={val} />))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CloudItemsMenu;\r\n","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './main.css';\r\nimport axios from \"axios\";\r\n\r\nclass Main extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      uploadedFile:null\r\n    }\r\n    this.onFileChange=this.onFileChange.bind(this);\r\n    this.onFileUpload=this.onFileUpload.bind(this);\r\n  }\r\n\r\n  onFileChange(event){\r\n    this.setState({ uploadedFile: event.target.files[0] }); \r\n\r\n  }\r\n  async onFileUpload(){\r\n    //fetch(\"upload\",{method:\"POST\",body:this.state.uploadedFile})\r\n    const data=new FormData()\r\n    console.log(this.state.uploadedFile)\r\n    data.append(\"file\",this.state.uploadedFile)\r\n\r\n    console.log(data)\r\n    await axios.post(\"http://localhost:4000/upload\",data)\r\n  }\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n        <input type=\"file\" onChange={this.onFileChange} /> \r\n                <button onClick={this.onFileUpload}> \r\n                  Upload! \r\n                </button> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nclass Nav extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:null\r\n        }\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleRedirect=this.handleRedirect.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(window.location.pathname===\"/\"){\r\n            this.setState({value:0})\r\n        }\r\n        else if(window.location.pathname===\"/clouditems\"){\r\n            this.setState({value:1})\r\n        }\r\n    }\r\n\r\n    handleChange(event,newValue){\r\n        this.setState({value:newValue})\r\n        \r\n    }\r\n\r\n    handleRedirect(){\r\n        if(this.state.value===0){\r\n            return(<Redirect to=\"/\"/>)\r\n        }\r\n        else if(this.state.value===1){\r\n            return(<Redirect to=\"/clouditems\"/>)\r\n\r\n        }\r\n        else{\r\n            return(null)\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <Paper square>\r\n            <Tabs\r\n                value={this.state.value|undefined}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                onChange={this.handleChange}\r\n                aria-label=\"disabled tabs example\"\r\n            >\r\n            <Tab label=\"Main\" />\r\n            <Tab label=\"Cloud\" />\r\n            </Tabs>\r\n            {this.handleRedirect()}\r\n        </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\nimport {  HashRouter, Route } from 'react-router-dom'\r\nimport {Router} from 'react-router'\r\nimport {Main,CloudItemsMenu, Nav} from \"./containers\"\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div>\r\n        <HashRouter>\r\n          <Nav/>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route exact path=\"/clouditems\" component={CloudItemsMenu} />\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}